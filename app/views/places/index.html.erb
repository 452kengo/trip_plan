<div class="map-container">
  <!--左側-->
  <div id="map" class="map-canvas"></div>
  <!--中央-->
  <div id="center-container">
    <div id="plan-canvas">
        <div class="d-flex flex-column h-100" style="width: 25rem; min-width: 25rem;">
          <div class="font-weight-bold px-4 py-2 plan-header">
            <div class="pr-5">
              <div class="em"><h5><%= @plan.title %></h5></div>
              <br>
              <div class=""><%= @plan.plan_date.strftime("%Y-%m-%d") %></div>
            </div>
          </div>
        </div>
      </div>
    <div id="spot-search">
      <div id="spot-search-top">
        <input id="address" type="textbox" placeholder="行きたい場所を検索">
        <input id="btn-spot" type="button" value="検索" onclick="codeAddress()">
      </div>
      <div id="spot-form">
        <%= form_for @place, url:plan_places_path(@plan),remote: true do |f| %>
          <%= f.text_field :name, id:"spot-name", value:"（上の検索フォームで検索してください）", :required => true %>
          <br>
          <%= f.text_field :address, id:"spot-address", :required => true %>
          <br>
          <div class="form-inline" role="form">
            <%= f.label :到着 %>
            <%= f.time_field :departure_time,id:"spot-departure_time", :required => true %>
            <P>&nbsp;&nbsp;&nbsp;</P>
            <%= f.label :出発 %>
            <%= f.time_field :arrival_time,id:"spot-arrival_time", :required => true %>
            <%= f.hidden_field :latitude, id:"spot-latitude" %>
            <%= f.hidden_field :longitude, id:"spot-longitude" %>
          </div>
          <%= f.fields_for :map, @place do |map| %>
            <%= map.hidden_field :latitude %>
            <%= map.hidden_field :longitude %>
          <% end %>
          <%= f.submit "保存", id:"spot-save" %>
        <% end %>
      </div>
    </div>
  </div>
  <!--右側-->
  <div>
    <div id="map-route" class="place-cards">
      <%= render @places %>
    </div>
    <div id="map-search">
      <%= button_tag "ルート検索", id: "btn-search", class: "btn", onclick: "search()" %>
    </div>
  </div>
</div>

<script>
var map
var geocoder
var marker = [];
var infoWindow = [];
var markerData = gon.place; // コントローラーで定義したインスタンス変数を変数に代入
var place_name = [];
var place_lat = [];
var place_lng = [];
var place_result

// GoogleMapを表示する関数(callback処理で呼び出される)
function initMap(){
  
  navigator.geolocation.getCurrentPosition(function (position) {
    // 現在地を取得
    currentLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  
    geocoder = new google.maps.Geocoder()
    // ビューのid='map_index'の部分にGoogleMapを埋め込む
    map = new google.maps.Map(document.getElementById('map'), {
      center: currentLocation, 
      zoom: 12,
    });
    
    place_lat = document.getElementById('place_map_latitude')
    place_lng = document.getElementById('place_map_longitude')

    // 繰り返し処理でマーカーと吹き出しを複数表示させる
    for (var i = 0; i < markerData.length; i++) {
      // 各地点の緯度経度を算出
      markerLatLng = new google.maps.LatLng({
        lat: markerData[i]['latitude'],
        lng: markerData[i]['longitude']
      });

      // マーカーの表示
      marker[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map
      });

      // 吹き出しの表示
      let id = markerData[i]['id']
      place_name[i]= markerData[i]['name'];
      place_lat[i]= markerData[i]['latitude'];
      place_lng[i]= markerData[i]['longitude'];
      infoWindow[i] = new google.maps.InfoWindow({
        // 吹き出しの中身, 引数で各属性の配列と配列番号を渡す
        content: `<a>${ markerData[i]['name'] }</a>`
      });
      markerEvent(i);
    }
  });
}

// マーカーをクリックしたら吹き出しを表示
function markerEvent(i) {
  marker[i].addListener('click', function () {
    infoWindow[i].open(map, marker[i]);
  });
}

function codeAddress() {
    let inputAddress = document.getElementById('address').value;
    var latLngInput = new google.maps.LatLng(place_lat.value, place_lng.value);

    geocoder.geocode({
      'address': inputAddress,
      latLng: latLngInput
    }, function (results, status) {
      var address = "";
      if (status == 'OK') {
        map.setCenter(results[0].geometry.location);
        place_result = results[0].geometry.location;
        place_lat.value = place_result.lat();
        place_lng.value = place_result.lng();
        address = results[0].formatted_address;
        var marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
        });

        // タイトルフォームにデフォルト値として検索値を設定
        let name = document.getElementById('spot-name');
        name.setAttribute("value", inputAddress);
        let latitude = document.getElementById('spot-latitude');
        latitude.setAttribute("value", place_lat.value);
        let longitude = document.getElementById('spot-longitude');
        longitude.setAttribute("value", place_lng.value);
        document.getElementById('spot-address').value = address;

      } else {
        alert('該当する結果がありませんでした' + status);
      }
    });
}



// ルートを検索する
function search() {
  var points = $('#map-route .route-spot');

  // 2地点以上のとき
  if (points.length >= 2){
      var origin; // 開始地点
      var destination; // 終了地点
      var waypoints = []; // 経由地点

      // origin, destination, waypointsを設定する
      for (var i = 0; i < points.length; i++) {
          const latlng = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
          if (i == 0){
            origin = latlng;
          } else if (i == points.length-1){
            destination = latlng;
          } else {
            waypoints.push({ location: latlng, stopover: true });
          }
      }
      // リクエストの作成
      var request = {
        origin:      origin,
        destination: destination,
        waypoints: waypoints,
        travelMode:  google.maps.TravelMode.DRIVING
      };
      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers : true,
            polylineOptions: { // 描画される線についての設定
              strokeColor: '#EE5533',
              strokeOpacity: 1,
              strokeWeight: 5
            }
          }).setDirections(response);//ライン描画部分

            // 距離、時間を表示する
            var data = response.routes[0].legs;
            for (var i = 0; i < data.length; i++) {
              const routeSpecText = data[i].distance.text  + "," + data[i].duration.text
                const div = $("<div></div>", {
                  class: 'route-spec',
                  text: routeSpecText })
                $(points[i]).after(div)
            }
        }
      });
  }
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async defer></script>