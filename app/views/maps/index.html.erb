<div class="map-container">
  <div id="map" class="map-canvas"></div>
  <div id="spot-search">
    <div id="spot-search-top">
      <input id="address" type="textbox" value="Sydney, NSW">
      <input type="button" value="検索" onclick="codeAddress()">
    </div>
    <!--<button type="button" id="btn-spot-add" class="btn btn-primary", onclick="location.href='/places#index';">場所を追加</button>-->
    <!-- 地図情報を保存するフォーム -->
    <div id="spot-form">
      <%= form_for @map do |f| %>
        <!-- 検索値を隠しデータとして送信-->
        <input type="hidden" name="map[address]" id="hidden_address">
        <%= f.text_field :name, class: "spot-name" %>
        <%= f.submit "保存", class: "spot-save" %>
      <% end %>
    </div>
  </div>
  <div id="map-route">
    <ul id="route-list" class="list-group"></ul>
    <div id="map-search">
      <%= button_tag "ルート検索", id: "btn-search", class: "btn btn-primary", onclick: "search()" %>
    </div>
    <div id="distance-time"></div>
  </div>
  <%= render @maps %>
</div>

<script>
var map
var maps
var geocoder
var marker
var infoWindow = [];
var markerData = gon.place; // コントローラーで定義したインスタンス変数を変数に代入
var place_name = [];
var place_lat = [];
var place_lng = [];

// GoogleMapを表示する関数(callback処理で呼び出される)
function initMap(){
    geocoder = new google.maps.Geocoder()
    // ビューのid='map_index'の部分にGoogleMapを埋め込む
    mapInstance = new google.maps.Map(document.getElementById('map'), {
      center: { lat: 35.6585, lng: 139.7486 }, // 東京タワーを中心
      zoom: 12,
    });
      
      // 保存された地図情報からピンをさす
    <% @maps.each do |map| %>
    // google.maps.LatLngインスタンスを生成
    console.log("------------")
    console.log(map)
    console.log("------------")
    pos = new google.maps.LatLng(
    11, //latitude
    2//longitude
    );
    default_marker = new google.maps.Marker({
    map: mapInstance,
    position: pos,
    icon: {
    url: ' https://maps.google.com/mapfiles/ms/icons/green-dot.png', //アイコンのURL
    scaledSize: new google.maps.Size(40, 40) //サイズ
    }
    });
    <% end %>

      // 情報ウィンドウの表示
      let id = markerData[i]['id']
      place_name[i]= markerData[i]['name'];
      place_lat[i]= markerData[i]['latitude'];
      place_lng[i]= markerData[i]['longitude'];
      infoWindow[i] = new google.maps.InfoWindow({
         content: `<a href='/places/${ id }'>${ markerData[i]['name'] }</a><br><input type="button" id="btn-add" value="追加" onclick="addPlace(place_name, place_lat, place_lng, ${i})">`
      });
      markerEvent(i);
}

function codeAddress(){
  let inputAddress = document.getElementById('address').value;

  geocoder.geocode( { 'address': inputAddress}, function(results, status) {
    if (status == 'OK') {
      mapInstance.setCenter(results[0].geometry.location);
      // 既存の検索マーカーを削除
      if(marker != null){
      marker.setMap(null);
      }
      marker = null;
      marker = new google.maps.Marker({
          map: mapInstance,
          position: results[0].geometry.location
      });
      
      // タイトルフォームにデフォルト値として検索値を設定
      let name = document.getElementById('map_name');
      name.setAttribute("value", inputAddress);
      
      // 検索値を隠しデータとしてセット
      let hidden_address = document.getElementById('hidden_address');
      hidden_address.setAttribute("value", inputAddress);
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });   
}

// マーカーをクリックしたら情報ウィンドウを表示
function markerEvent(i) {
  marker[i].addListener('click', function () {
    infoWindow[i].open(map, marker[i]);
  });
}

// リストに追加する
function addPlace(name, lat, lng, number){
  var li = $('<li>', {
    text: name[number],
    "class": "list-group-item"
  });
  li.attr("data-lat", lat[number]); // data-latという属性にlat[number]を入れる
  li.attr("data-lng", lng[number]); // data-lngという属性にlng[number]を入れる
  $('#route-list').append(li); // idがroute-listの要素の一番後ろにliを追加
}

// ルートを検索する
function search() {
  var points = $('#route-list li');

  // 2地点以上のとき
  if (points.length >= 2){
      var origin; // 開始地点
      var destination; // 終了地点
      var waypoints = []; // 経由地点

      // origin, destination, waypointsを設定する
      for (var i = 0; i < points.length; i++) {
          points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
          if (i == 0){
            origin = points[i];
          } else if (i == points.length-1){
            destination = points[i];
          } else {
            waypoints.push({ location: points[i], stopover: true });
          }
      }
      // リクエストの作成
      var request = {
        origin:      origin,
        destination: destination,
        waypoints: waypoints,
        travelMode:  google.maps.TravelMode.DRIVING
      };
      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers : true,
            polylineOptions: { // 描画される線についての設定
              strokeColor: '#CC3333',
              strokeOpacity: 1,
              strokeWeight: 5
            }
          }).setDirections(response);//ライン描画部分

            // 距離、時間を表示する
            var data = response.routes[0].legs;
            for (var i = 0; i < data.length; i++) {
                // 距離
                var li = $('<li>', {
                  text: data[i].distance.text,
                  "class": "display-group-item"
                });
                $('#display-list').append(li);

                // 時間
                var li = $('<li>', {
                  text: data[i].duration.text,
                  "class": "display-group-item"
                });
                $('#display-list').append(li);
            }
            const route = response.routes[0];
            // ビューのid='directions-panel'の部分に埋め込む
            const summaryPanel = document.getElementById("distance-time");
            summaryPanel.innerHTML = "";

            // 各地点間の距離・時間を表示
            for (let i = 0; i < route.legs.length; i++) {
              const routeSegment = i + 1;
              summaryPanel.innerHTML +=
                "<b>Route Segment: " + routeSegment + "</b><br>";
              summaryPanel.innerHTML += route.legs[i].start_address + "<br>" + " ↓ " + "<br>";
              summaryPanel.innerHTML += route.legs[i].end_address + "<br>";
              summaryPanel.innerHTML += "<" + route.legs[i].distance.text + ",";
              summaryPanel.innerHTML += route.legs[i].duration.text + ">" + "<br>";
            }
        }
      });
  }
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap" async defer></script>